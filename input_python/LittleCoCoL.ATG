COMPILER MyCOCOR
(.//Especificacion de Funciones.)
CHARACTERS

letter= "ABCDEFGHIJKLMN�OPQRSTUVWXYZabcdefghijklmn�opqrstuvwxyz".
digit= "0123456789".

cr = CHR(13).
lf = CHR(10).
tab = CHR(9).
ignore = cr+lf+tab.
comillas = CHR(34).
stringletter = ANY-comillas-ignore.

operadores ="+-=()[]{}|.<>".
MyANY = ANY-operadores.

TOKENS

ident = letter{letter|digit} EXCEPT KEYWORDS.
string = comillas stringletter{stringletter} comillas.

char = "'"["/"]letter"'".
charnumber = "CHR("digit{digit}")".
charinterval = "CHR("digit{digit}")""..""CHR("digit{digit}")".

nontoken = MyANY.
startcode ="(.".
ndcode=".)".

IGNORE SET ignore

PRODUCTIONS

MyCOCOR= 				(.CompilerName,EndName = '',''.)
	"COMPILER" 
	Ident<ref CompilerName>		(.print("Nombre Inicial del Compilador: ",CompilerName).) 
	[Codigo]
	Body
	"end" Ident<ref EndName>	(.print("Nombre Final del Compilador: ",EndName).) 
.

Body = 
	{
	Characters |
	[Keywords] |
	Tokens |
	Productions |  	
	}
.


Characters =				(.CharName, Counter = '', 0.)

	"CHARACTERS"			(.print("READING CHARACTERS").)
	{
		Ident<ref CharName>	(.Counter+=1.)
		"="
		CharSet			
		{
			"+"CharSet
			|
			"-"CharSet
		}
		"."
	}
.
			 
Keywords = 				(.KeyName, StringValue, Counter = '', '', 0.)

	"KEYWORDS"			(.print("READING KEYWORDS").)
	{
		
		Ident<ref KeyName>	(.Counter+=1.)
		"="
		String<ref StringValue>
		"."

	}

.


Tokens =				(.TokenName, Counter = '', 0.)
	
	"TOKENS"			(.print("READING TOKENS").)
	{
		Ident<ref TokenName>	(.Counter+=1.)
		"="
		TokenExpr
		[ExceptKeyword]
		"."

	}

.


Productions = 				(.Counter = 0.)
	
	"PRODUCTIONS"			(.ProdName = ''.)
	{
		Ident<ref ProdName>	(.Counter+=1.)
		[Atributos]
		"="
		[Codigo]
		ProductionExpr
		"."

	}
.

ExceptKeyword= 
	(
	"EXCEPT"
	"KEYWORDS"
	)
.


ProductionExpr =
	ProdTerm
	{
	"|"
	ProdTerm
	}
.

ProdTerm =
	ProdFactor
	{
	ProdFactor
	}
.

ProdFactor =
	(
	SymbolProd
	|
	"("ProductionExpr")"
	|
	"["ProductionExpr"]"
	|
	"{"ProductionExpr"}"
	)
	[Codigo]
.



SymbolProd =			(.SV, IN = '',''.)
	(
	String<ref SV>		(.print("String en Production: ",SV).)
	|
	char
	|
	Ident<ref IN>		(.print("Identificador en Production: ",IN).)
	[Atributos] 
	)
.

Codigo =
	startcode
	{ ANY }
	ndcode
.

Atributos =
	"<"
	{ANY}
	">"
.
	


TokenExpr=
	TokenTerm
	{
	"|"
	TokenTerm
	}
.

TokenTerm=
	TokenFactor
	{
	TokenFactor	
	}
.

TokenFactor=
	(
	SimbolToken
	|
	"("TokenExpr")"
	|
	"["TokenExpr"]"
	|
	"{"TokenExpr"}"
	)
.

SimbolToken =			(.IdentName, StringValue = '',''.)		
	(
	String<ref StringValue>
	|
	char
	|
	Ident<ref IdentName>	(.print("Identificador en Token: ",IdentName).)
	)
.



CharSet= 			(.IdentName, StringValue = '',''.)	
	(
	String<ref StringValue>
	|
	Char
	|
	"ANY"
	|
	Ident<ref IdentName>	(.print("Identificador en CharSet: ",IdentName).)
	)
	
.


Char=
	(
	char
	|
	charnumber
	|
	charinterval
	)
.


String<ref string S>=
	string		(.S = self.t.val.)
.

Ident<ref string S>=
	ident		(.S = self.t.val.)
.


END MyCOCOR